<?xml version="1.0" encoding="UTF-8" ?>
<beans:beans xmlns="http://www.springframework.org/schema/security" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<global-method-security pre-post-annotations="enabled">
		<expression-handler ref="aclExpressionHandler" />
	</global-method-security>

	<http pattern="/resources/**" security="none" />
	<http use-expressions="false" entry-point-ref="negotiateSecurityFilterEntryPoint">
		<intercept-url pattern="/admin/**" access="ROLE_ADMIN" />
		<custom-filter ref="waffleNegotiateSecurityFilter" position="BASIC_AUTH_FILTER" />
		<!-- <custom-filter ref="spnegoAuthenticationProcessingFilter" position="BASIC_AUTH_FILTER" /> -->
		<form-login login-page="/html/user/login.html" />
		<logout />
		<session-management>
			<concurrency-control max-sessions="3" error-if-maximum-exceeded="true" />
		</session-management>
	</http>
	<authentication-manager alias="authenticationManager">
		<authentication-provider ref="waffleSpringAuthenticationProvider" />
		<authentication-provider>
			<jdbc-user-service data-source-ref="dataSource_app" />
			<password-encoder hash="sha">
				<salt-source user-property="username" />
			</password-encoder>
		</authentication-provider>
	</authentication-manager>

	<!-- Just returns the User authenticated by Kerberos and gives him the ROLE_USER -->
	<!-- <beans:bean id="dummyUserDetailsService" class="org.springframework.security.extensions.kerberos.sample.DummyUserDetailsService" 
		/> -->
	<beans:bean id="rememberMeAuthenticationProvider" class="org.springframework.security.authentication.RememberMeAuthenticationProvider">
		<beans:property name="key" value="app" />
	</beans:bean>

	<!-- windows authentication provider -->
	<beans:bean id="waffleWindowsAuthProvider" class="waffle.windows.auth.impl.WindowsAuthProviderImpl" />

	<!-- waffle authentication provider -->
	<beans:bean id="waffleSpringAuthenticationProvider" class="waffle.spring.WindowsAuthenticationProvider">
		<beans:property name="AllowGuestLogin" value="false" />
		<beans:property name="PrincipalFormat" value="fqn" />
		<beans:property name="RoleFormat" value="both" />
		<beans:property name="AuthProvider" ref="waffleWindowsAuthProvider" />
	</beans:bean>

	<beans:bean id="negotiateSecurityFilterEntryPoint" class="waffle.spring.NegotiateSecurityFilterEntryPoint">
		<beans:property name="Provider" ref="waffleSecurityFilterProviderCollection" />
	</beans:bean>


	<beans:bean id="waffleNegotiateSecurityFilter" class="waffle.spring.NegotiateSecurityFilter">
		<beans:property name="Provider" ref="waffleSecurityFilterProviderCollection" />
	</beans:bean>
	<beans:bean id="waffleSecurityFilterProviderCollection" class="waffle.servlet.spi.SecurityFilterProviderCollection">
		<beans:constructor-arg>
			<beans:list>
				<beans:ref bean="negotiateSecurityFilterProvider" />
				<beans:ref bean="basicSecurityFilterProvider" />
			</beans:list>
		</beans:constructor-arg>
	</beans:bean>
	<beans:bean id="negotiateSecurityFilterProvider" class="waffle.servlet.spi.NegotiateSecurityFilterProvider">
		<beans:constructor-arg ref="waffleWindowsAuthProvider" />
		<beans:property name="protocols">
			<beans:list>
				<beans:value>Negotiate</beans:value>
				<beans:value>NTLM</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	<beans:bean id="basicSecurityFilterProvider" class="waffle.servlet.spi.BasicSecurityFilterProvider">
		<beans:constructor-arg ref="waffleWindowsAuthProvider" />
		<beans:property name="realm" value="Basic Security Realm" />
	</beans:bean>

</beans:beans>
