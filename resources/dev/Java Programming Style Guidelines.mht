From: "Saved by Windows Internet Explorer 8"
Subject: Java Programming Style Guidelines
Date: Wed, 8 Jun 2011 16:29:06 +0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_0000_01CC25F9.2F9C0420"
X-MimeOLE: Produced By Microsoft MimeOLE V6.1.7601.17574

This is a multi-part message in MIME format.

------=_NextPart_000_0000_01CC25F9.2F9C0420
Content-Type: text/html;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://geosoft.no/development/javastyle.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" =
"http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<HTML><HEAD><TITLE>Java Programming Style Guidelines</TITLE><!--=0A=
*************************************************************************=
******=0A=
  Google Analytics=0A=
*************************************************************************=
******=0A=
-->
<!--=0A=
*************************************************************************=
******=0A=
  Page header=0A=
*************************************************************************=
******=0A=
-->
<META name=3DAuthor content=3D"Geotechnical Software Services">
<META name=3DKeywords=20
content=3D"java, programming, software, development, code, style, =
guideline, guidelines, recommendation, recommendations, layout, =
standard, conventions, standardization, naming, names, indentation, =
block, readability, maintainability, mixed case, suffix, prefix, =
statement, statements, conditional, white space, align, alignment =
comments, javadoc, code complete, steve mcconnel, nasa, geosoft, =
geotechnical, software, services, stavanger, norway">
<META name=3DDescription=20
content=3D"Java Programming Style Guidelines. Coding recommensations for =
Java developers including naming conventions, code layout, commenting =
and more.">
<META content=3D"text/html; charset=3Diso-8859-1" =
http-equiv=3DContent-Type><LINK=20
rel=3Dstylesheet type=3Dtext/css href=3D"http://geosoft.no/style.css">
<META name=3DGENERATOR content=3D"MSHTML 8.00.7601.17573"></HEAD>
<BODY link=3D#7a88a1 bgColor=3Dwhite vLink=3D#7a88a1 marginheight=3D"20" =

marginwidth=3D"20"><!--=0A=
*************************************************************************=
******=0A=
   HEADING=0A=
*************************************************************************=
******=0A=
-->
<CENTER>
<H1 class=3Dtitle>Java Programming Style Guidelines</H1><EM>Version 6.3, =
January=20
2011</EM><BR><EM>Geotechnical Software Services</EM><BR><EM>Copyright =
=A9 1998 -=20
2011</EM><BR>
<P>This document is available at <A=20
href=3D"http://geosoft.no/development/javastyle.html">http://geosoft.no/d=
evelopment/javastyle.html</A>=20
</P>
<P><A href=3D"http://webhostingrating.com/libs/javastyle-be">Belorussian =

translation</A> by Bohdan Zograf (external site) </P></CENTER>
<P></P>
<HR width=3D"100%">
<!--=0A=
*************************************************************************=
******=0A=
   TABLE OF CONTENT=0A=
*************************************************************************=
******=0A=
-->
<H1>Table of Content </H1>
<TABLE border=3D0 cellSpacing=3D0 cellPadding=3D8>
  <TBODY>
  <TR>
    <TD>
    </TD></TR></TBODY></TABLE>&nbsp; &nbsp; <A=20
href=3D"http://geosoft.no/development/development/javastyle.html#introduc=
tion">1=20
Introduction</A><BR>&nbsp; &nbsp; &nbsp; &nbsp; <A=20
href=3D"#Layout of the =
Recommendations">1.1=20
Layout of the Recommendations</A><BR>&nbsp; &nbsp; &nbsp; &nbsp; <A=20
href=3D"#Recommendation">1.2 =

Recommendations Importance</A><BR>&nbsp; &nbsp; &nbsp; &nbsp; <A=20
href=3D"#Checkstyle">1.3 =
Automatic=20
Style Checking</A><BR><BR>&nbsp; &nbsp; <A=20
href=3D"#General =
Recommendations">2=20
General Recommendations</A><BR><BR>&nbsp; &nbsp; <A=20
href=3D"#Naming =
Conventions">3 Naming=20
Conventions</A><BR>&nbsp; &nbsp; &nbsp; &nbsp; <A=20
href=3D"#General">3.1 =
General Naming=20
Conventions</A><BR>&nbsp; &nbsp; &nbsp; &nbsp; <A=20
href=3D"#Specific">3.2 =
Specific naming=20
Conventions</A><BR><BR>&nbsp; &nbsp; <A=20
href=3D"#Files">4=20
Files</A><BR><BR>&nbsp; &nbsp; <A=20
href=3D"#Statements">5=20
Statements</A><BR>&nbsp; &nbsp; &nbsp; &nbsp; <A=20
href=3D"#Package and Import =
Statements">5.1=20
Package and Import Statements</A><BR>&nbsp; &nbsp; &nbsp; &nbsp; <A=20
href=3D"#Classes and =
Interfaces">5.2=20
Classes and Interfaces</A><BR>&nbsp; &nbsp; &nbsp; &nbsp; <A=20
href=3D"#Methods">5.3=20
Methods</A><BR>&nbsp; &nbsp; &nbsp; &nbsp; <A=20
href=3D"#Types">5.4=20
Types</A><BR>&nbsp; &nbsp; &nbsp; &nbsp; <A=20
href=3D"#Variables">5.5=20
Variables</A><BR>&nbsp; &nbsp; &nbsp; &nbsp; <A=20
href=3D"#Loops">5.6=20
Loops</A><BR>&nbsp; &nbsp; &nbsp; &nbsp; <A=20
href=3D"#Conditionals">5.7=20
Conditionals</A><BR>&nbsp; &nbsp; &nbsp; &nbsp; <A=20
href=3D"#Misc">5.8=20
Miscellaneous</A><BR><BR>&nbsp; &nbsp; <A=20
href=3D"#Layout and =
Comments">6 Layout=20
and Comments</A><BR>&nbsp; &nbsp; &nbsp; &nbsp; <A=20
href=3D"#Layout">6.1=20
Layout</A><BR>&nbsp; &nbsp; &nbsp; &nbsp; <A=20
href=3D"#White Space">6.2 =
White=20
space</A><BR>&nbsp; &nbsp; &nbsp; &nbsp; <A=20
href=3D"#Comments">6.3=20
Comments</A><BR><BR>&nbsp; &nbsp; <A=20
href=3D"#References">7=20
References</A><BR><BR>
<TABLE border=3D0 cellSpacing=3D0 cellPadding=3D8>
  <TBODY>
  <TR>
    <TD>
    </TD></TR></TBODY></TABLE>
<HR width=3D"100%">
<!--=0A=
*************************************************************************=
******=0A=
=0A=
   1 INTRODUCTION=0A=
=0A=
*************************************************************************=
******=0A=
-->
<H1><A name=3Dintroduction></A>1 Introduction </H1>
<P>This document lists Java coding recommendations common in the Java=20
development community.=20
<P>The recommendations are based on established standards collected from =
a=20
number of sources, individual experience, local requirements/needs, as =
well as=20
suggestions given in <A=20
href=3D"#ref1">[1]</A>, <A=20
href=3D"#ref2">[2]</A>, <A=20
href=3D"#ref3">[3]</A>, <A=20
href=3D"#ref4">[4]</A> and =
<A=20
href=3D"#ref5">[5]</A>.=20
<P>There are several reasons for introducing a new guideline rather than =
just=20
referring to the ones above. Main reason is that these guides are far =
too=20
general in their scope and that more specific rules (especially naming =
rules)=20
need to be established. Also, the present guide has an annotated form =
that makes=20
it easier to use during project code reviews than most other existing=20
guidelines. In addition, programming recommendations generally tend to =
mix style=20
issues with language technical issues in a somewhat confusing manner. =
The=20
present document does not contain any Java technical recommendations at =
all, but=20
focuses mainly on programming style.=20
<P>While a given development environment (IDE) can improve the =
readability of=20
code by access visibility, color coding, automatic formatting and so on, =
the=20
programmer should never <EM>rely</EM> on such features. Source code =
should=20
always be considered <EM>larger</EM> than the IDE it is developed within =
and=20
should be written in a way that maximize its readability independent of =
any IDE.=20

<H3><A name=3D"Layout of the Recommendations"></A>1.1 Layout of the=20
Recommendations. </H3>
<P>The recommendations are grouped by topic and each recommendation is =
numbered=20
to make it easier to refer to during reviews.=20
<P>Layout for the recommendations is as follows:=20
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>n. Guideline short description </TD></TR>
  <TR><TD class=3Dexample>Example if applicable
</TD></TR>
  <TR>
    <TD class=3Drationale>Motivation, background and additional =
information.=20
  </TD></TR></TBODY></TABLE>
<P>The motivation section is important. Coding standards and guidelines =
tend to=20
start "religious wars", and it is important to state the background for =
the=20
recommendation.=20
<H3><A name=3DRecommendation></A>1.2 Recommendation Importance </H3>
<P>In the guideline sections the terms <EM>must</EM>, <EM>should =
</EM>and=20
<EM>can </EM>have special meaning. A <EM>must </EM>requirement must be =
followed,=20
a <EM>should </EM>is a strong recommendation, and a <EM>can </EM>is a =
general=20
guideline.=20
<H3><A name=3DCheckstyle></A>1.3 Automatic Style Checking </H3>
<P>Many tools provide automatic code style checking. One of the most =
popular and=20
feature rich one is <A=20
href=3D"http://checkstyle.sourceforge.net/"><EM>Checkstyle</EM> </A>by =
Oliver=20
Burn.=20
<P>Checkstyle is configured through an XML file of <EM>style rules</EM> =
which is=20
applied to the source code. It is most useful if it is integrated in the =
build=20
process or the development environment. There are Checkstyle plugins for =
all the=20
popular IDEs available.=20
<P>To use Checkstyle with the GeoSoft style rules below, use this =
configuration=20
file: <A=20
href=3D"http://geosoft.no/development/geosoft_checks.xml">geosoft_checks.=
xml</A>. <!--=0A=
*************************************************************************=
******=0A=
=0A=
   GENERAL RECOMMENDATIONS=0A=
=0A=
*************************************************************************=
******=0A=
-->
<P>
<H1><A name=3D"General Recommendations"></A>2 General Recommendations =
</H1><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>1. Any violation to the guide is allowed if it =
enhances=20
      readability. </TD></TR>
  <TR><TD class=3Dexample></TD></TR>
  <TR>
    <TD class=3Drationale>The main goal of the recommendation is to =
improve=20
      readability and thereby the understanding and the maintainability =
and=20
      general quality of the code. It is impossible to cover all the =
specific=20
      cases in a general guide and the programmer should be flexible.=20
  </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
******=0A=
=0A=
   NAMING CONVENSIONS=0A=
=0A=
*************************************************************************=
******=0A=
-->
<P>
<H1><A name=3D"Naming Conventions"></A>3 Naming Conventions </H1>
<H3><A name=3DGeneral></A>3.1 General Naming Conventions </H3><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>2. Names representing packages should be in all =
lower=20
      case. </TD></TR>
  <TR><TD class=3Dexample>mypackage, com.company.application.ui
</TD></TR>
  <TR>
    <TD class=3Drationale>Package naming convention used by Sun for the =
Java=20
      core packages. The initial package name representing the domain =
name must=20
      be in lower case. </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>3. Names representing types must be nouns and =
written in=20
      mixed case starting with upper case. </TD></TR>
  <TR><TD class=3Dexample>Line, AudioSystem
</TD></TR>
  <TR>
    <TD class=3Drationale border-width=3D"0">Common practice in the Java =

      development community and also the type naming convention used by =
Sun for=20
      the Java core packages. </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>4. Variable names must be in mixed case starting =
with=20
      lower case. </TD></TR>
  <TR><TD class=3Dexample>line, audioSystem
</TD></TR>
  <TR>
    <TD class=3Drationale>Common practice in the Java development =
community and=20
      also the naming convention for variables used by Sun for the Java =
core=20
      packages. Makes variables easy to distinguish from types, and =
effectively=20
      resolves potential naming collision as in the declaration <TT>Line =

      line;</TT> </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>5. Names representing constants (final variables) =
must be=20
      all uppercase using underscore to separate words. </TD></TR>
  <TR><TD class=3Dexample>MAX_ITERATIONS, COLOR_RED
</TD></TR>
  <TR>
    <TD class=3Drationale>Common practice in the Java development =
community and=20
      also the naming convention used by Sun for the Java core packages. =

      <P>In general, the use of such constants should be minimized. In =
many=20
      cases implementing the value as a method is a better choice:=20
      <P><PRE>  int getMaxIterations() // NOT: MAX_ITERATIONS =3D 25
  {
    return 25;
  }
</PRE>
      <P>This form is both easier to read, and it ensures a uniform =
interface=20
      towards class values. </P></TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>6. Names representing methods must be verbs and =
written in=20
      mixed case starting with lower case. </TD></TR>
  <TR><TD class=3Dexample>getName(), computeTotalWidth()
</TD></TR>
  <TR>
    <TD class=3Drationale>Common practice in the Java development =
community and=20
      also the naming convention used by Sun for the Java core packages. =
This is=20
      identical to variable names, but methods in Java are already=20
      distinguishable from variables by their specific form.=20
</TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>7. Abbreviations and acronyms should not be =
uppercase when=20
      used as name. </TD></TR>
  <TR><TD class=3Dexample>exportHtmlSource(); <I class=3Dnot>// NOT: =
exportHTMLSource();</I>
openDvdPlayer();    <I class=3Dnot>// NOT: openDVDPlayer();</I>
</TD></TR>
  <TR>
    <TD class=3Drationale>Using all uppercase for the base name will =
give=20
      conflicts with the naming conventions given above. A variable of =
this type=20
      whould have to be named <TT>dVD</TT>, <TT>hTML</TT> etc. which =
obviously=20
      is not very readable. Another problem is illustrated in the =
examples=20
      above; When the name is connected to another, the readability is =
seriously=20
      reduced; The word following the acronym does not stand out as it =
should.=20
    </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>8. Private class variables should have underscore =
suffix.=20
    </TD></TR>
  <TR><TD class=3Dexample>class Person
{
  private String name_;
  ...
}
</TD></TR>
  <TR>
    <TD class=3Drationale>Apart from its name and its type, the =
<EM>scope</EM>=20
      of a variable is its most important feature. Indicating class =
scope by=20
      using underscore makes it easy to distinguish class variables from =
local=20
      scratch variables. This is important because class variables are=20
      considered to have higher significance than method variables, and =
should=20
      be treated with special care by the programmer.=20
      <P>A side effect of the underscore naming convention is that it =
nicely=20
      resolves the problem of finding reasonable variable names for =
setter=20
      methods: <PRE>  void setName(String name)
  {
    name_ =3D name;
  }
</PRE>
      <P>An issue is whether the underscore should be added as a prefix =
or as a=20
      suffix. Both practices are commonly used, but the latter is =
recommended=20
      because it seem to best preserve the readability of the name.=20
      <P>It should be noted that scope identification in variables have =
been a=20
      controversial issue for quite some time. It seems, though, that =
this=20
      practice now is gaining acceptance and that it is becoming more =
and more=20
      common as a convention in the professional development community.=20
  </P></TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>9. Generic variables should have the same name as =
their=20
      type. </TD></TR>
  <TR><TD class=3Dexample>void setTopic(Topic topic) <I class=3Dnot>// =
NOT: void setTopic(Topic value)</I>
                           <I class=3Dnot>// NOT: void setTopic(Topic =
aTopic)</I>
                           <I class=3Dnot>// NOT: void setTopic(Topic =
t)</I>

void connect(Database database) <I class=3Dnot>// NOT: void =
connect(Database db)</I>
                                <I class=3Dnot>// NOT: void =
connect(Database oracleDB)</I>
</TD></TR>
  <TR>
    <TD class=3Drationale>Reduce complexity by reducing the number of =
terms and=20
      names used. Also makes it easy to deduce the type given a variable =
name=20
      only.=20
      <P>If for some reason this convention doesn't seem to <EM>fit</EM> =
it is a=20
      strong indication that the type name is badly chosen. =
<BR><BR>Non-generic=20
      variables have a <EM>role</EM>. These variables can often be named =
by=20
      combining role and type: <PRE>  Point  startingPoint, centerPoint;
  Name   loginName;
</PRE></TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>10. All names should be written in English. =
</TD></TR>
  <TR><TD class=3Dexample></TD></TR>
  <TR>
    <TD class=3Drationale>English is the preferred language for =
international=20
      development. </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>11. Variables with a large scope should have long =
names,=20
      variables with a small scope can have short names <A=20
      =
href=3D"#ref1">[1]</A>. =
</TD></TR>
  <TR><TD class=3Dexample></TD></TR>
  <TR>
    <TD class=3Drationale>Scratch variables used for temporary storage =
or=20
      indices are best kept short. A programmer reading such variables =
should be=20
      able to assume that its value is not used outside a few lines of =
code.=20
      Common scratch variables for integers are <EM>i</EM>, <EM>j</EM>,=20
      <EM>k</EM>, <EM>m</EM>, <EM>n</EM> and for characters <EM>c</EM> =
and=20
      <EM>d</EM>. </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>12. The name of the object is implicit, and should =
be=20
      avoided in a method name. </TD></TR>
  <TR><TD class=3Dexample>line.getLength();   <I class=3Dnot>// NOT: =
line.getLineLength();</I>
</TD></TR>
  <TR>
    <TD class=3Drationale>The latter might seem natural in the class=20
      declaration, but proves superfluous in use, as shown in the =
example.=20
  </TD></TR></TBODY></TABLE>
<H3><A name=3DSpecific></A>3.2 Specific Naming Conventions </H3><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>13. The terms <EM>get/set</EM> must be used where =
an=20
      attribute is accessed directly. </TD></TR>
  <TR><TD class=3Dexample>employee.getName();
employee.setName(name);

matrix.getElement(2, 4);
matrix.setElement(2, 4, value);
</TD></TR>
  <TR>
    <TD class=3Drationale>Common practice in the Java community and the=20
      convention used by Sun for the Java core packages. =
</TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>14. <EM>is</EM> prefix should be used for boolean=20
      variables and methods. </TD></TR>
  <TR><TD class=3Dexample>isSet, isVisible, isFinished, isFound, isOpen
</TD></TR>
  <TR>
    <TD class=3Drationale>This is the naming convention for boolean =
methods and=20
      variables used by Sun for the Java core packages.=20
      <P>Using the <EM>is</EM> prefix solves a common problem of =
choosing bad=20
      boolean names like <EM>status</EM> or <EM>flag</EM>. =
<EM>isStatus</EM> or=20
      <EM>isFlag</EM> simply doesn't fit, and the programmer is forced =
to chose=20
      more meaningful names.=20
      <P>Setter methods for boolean variables must have <I>set</I> =
prefix as in:=20
<PRE>  void setFound(boolean isFound);
</PRE>
      <P>There are a few alternatives to the <EM>is</EM> prefix that =
fits better=20
      in some situations. These are <EM>has</EM>, <EM>can</EM> and=20
      <EM>should</EM> prefixes: <PRE>  boolean hasLicense();
  boolean canEvaluate();
  boolean shouldAbort =3D false;
</PRE></TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>15. The term <EM>compute</EM> can be used in =
methods where=20
      something is computed. </TD></TR>
  <TR><TD class=3Dexample>valueSet.computeAverage();
matrix.computeInverse()
</TD></TR>
  <TR>
    <TD class=3Drationale>Give the reader the immediate clue that this =
is a=20
      potential time consuming operation, and if used repeatedly, he =
might=20
      consider caching the result. Consistent use of the term enhances=20
      readability. </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>16. The term <EM>find</EM> can be used in methods =
where=20
      something is looked up. </TD></TR>
  <TR><TD class=3Dexample>vertex.findNearestVertex();
matrix.findSmallestElement();
node.findShortestPath(Node destinationNode);
</TD></TR>
  <TR>
    <TD class=3Drationale>Give the reader the immediate clue that this =
is a=20
      simple look up method with a minimum of computations involved. =
Consistent=20
      use of the term enhances readability. =
</TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>17. The term <EM>initialize</EM> can be used where =
an=20
      object or a concept is established. </TD></TR>
  <TR><TD class=3Dexample>printer.initializeFontSet();
</TD></TR>
  <TR>
    <TD class=3Drationale>The American <EM>initialize</EM> should be =
preferred=20
      over the English <EM>initialise</EM>. Abbreviation <EM>init</EM> =
must be=20
      avoided. </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>18. JFC (Java Swing) variables should be suffixed =
by the=20
      element type. </TD></TR>
  <TR><TD class=3Dexample>widthScale, nameTextField, leftScrollbar, =
mainPanel, fileToggle, minLabel, printerDialog
</TD></TR>
  <TR>
    <TD class=3Drationale>Enhances readability since the name gives the =
user an=20
      immediate clue of the type of the variable and thereby the =
available=20
      resources of the object. </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>19. Plural form should be used on names =
representing a=20
      collection of objects. </TD></TR>
  <TR><TD class=3Dexample>Collection&lt;Point&gt;  points;
int[]              values;
</TD></TR>
  <TR>
    <TD class=3Drationale>Enhances readability since the name gives the =
user an=20
      immediate clue of the type of the variable and the operations that =
can be=20
      performed on its elements. </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>20. <EM>n</EM> prefix should be used for variables =

      representing a number of objects. </TD></TR>
  <TR><TD class=3Dexample>nPoints, nLines
</TD></TR>
  <TR>
    <TD class=3Drationale>The notation is taken from mathematics where =
it is an=20
      established convention for indicating a number of objects.=20
      <P>Note that Sun use <EM>num</EM> prefix in the core Java packages =
for=20
      such variables. This is probably meant as an abbreviation of =
<EM>number=20
      of</EM>, but as it looks more like <EM>number</EM> it makes the =
variable=20
      name strange and misleading. If "number of" is the preferred =
phrase,=20
      <EM>numberOf</EM> prefix can be used instead of just <EM>n</EM>.=20
      <EM>num</EM> prefix must not be used. =
</P></TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>21. <EM>No</EM> suffix should be used for =
variables=20
      representing an entity number. </TD></TR>
  <TR><TD class=3Dexample>tableNo, employeeNo
</TD></TR>
  <TR>
    <TD class=3Drationale>The notation is taken from mathematics where =
it is an=20
      established convention for indicating an entity number.=20
      <P>An elegant alternative is to prefix such variables with an =
<EM>i</EM>:=20
      <TT>iTable, iEmployee</TT>. This effectively makes them =
<EM>named</EM>=20
      iterators. </P></TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>22. Iterator variables should be called =
<EM>i</EM>,=20
      <EM>j</EM>, <EM>k</EM> etc. </TD></TR>
  <TR><TD class=3Dexample>for (Iterator i =3D points.iterator(); =
i.hasNext(); ) {
  :
}

for (int i =3D 0; i &lt; nTables; i++) {
  :
}
</TD></TR>
  <TR>
    <TD class=3Drationale>The notation is taken from mathematics where =
it is an=20
      established convention for indicating iterators.=20
      <P>Variables named <EM>j</EM>, <EM>k</EM> etc. should be used for =
nested=20
      loops only. </P></TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>23. Complement names must be used for complement =
entities=20
      <A =
href=3D"#ref1">[1]</A>.=20
</TD></TR>
  <TR><TD class=3Dexample>get/set, add/remove, create/destroy, =
start/stop, insert/delete,
increment/decrement, old/new, begin/end, first/last, up/down, min/max,
next/previous, old/new, open/close, show/hide, suspend/resume, etc.
</TD></TR>
  <TR>
    <TD class=3Drationale>Reduce complexity by symmetry. =
</TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>24. Abbreviations in names should be =
avoided.</TD></TR>
  <TR><TD class=3Dexample>computeAverage();               <I =
class=3Dnot>// NOT: compAvg();</I>
ActionEvent event;              <I class=3Dnot>// NOT: ActionEvent =
e;</I>
catch (Exception exception) {   <I class=3Dnot>// NOT: catch (Exception =
e) {</I>
</TD></TR>
  <TR>
    <TD class=3Drationale>There are two types of words to consider. =
First are=20
      the common words listed in a language dictionary. These must never =
be=20
      abbreviated. Never write:=20
      <P><TT>cmd&nbsp;&nbsp;</TT> instead of <TT>&nbsp;=20
      command</TT><BR><TT>comp&nbsp;</TT> instead of <TT>&nbsp;=20
      compute</TT><BR><TT>cp &nbsp;&nbsp;</TT> instead of <TT>&nbsp;=20
      copy</TT><BR><TT>e &nbsp; &nbsp;</TT> instead of <TT>&nbsp;=20
      exception</TT><BR><TT>init&nbsp;</TT> instead of <TT>&nbsp;=20
      initialize</TT><BR><TT>pt &nbsp;&nbsp;</TT> instead of <TT>&nbsp;=20
      point</TT><BR>etc.=20
      <P>Then there are domain specific phrases that are more naturally =
known=20
      through their acronym or abbreviations. These phrases should be =
kept=20
      abbreviated. Never write:=20
      <P><TT>HypertextMarkupLanguage&nbsp; </TT>instead of <TT>&nbsp;=20
      html</TT><BR><TT>CentralProcessingUnit &nbsp;&nbsp; </TT>instead =
of=20
      <TT>&nbsp; cpu</TT><BR><TT>PriceEarningRatio &nbsp;&nbsp; &nbsp; =
&nbsp;=20
      </TT>instead of <TT>&nbsp; pe</TT><BR>etc. =
</P></TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>25. Negated boolean variable names must be =
avoided. </TD></TR>
  <TR><TD class=3Dexample>bool isError; <I class=3Dnot>// NOT: =
isNoError</I>
bool isFound; <I class=3Dnot>// NOT: isNotFound</I>
</TD></TR>
  <TR>
    <TD class=3Drationale>The problem arise when the logical not =
operator is=20
      used and double negative arises. It is not immediately apparent =
what=20
      <TT>!isNotError</TT> means. </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>26. Associated constants (final variables) should =
be=20
      prefixed by a common type name. </TD></TR>
  <TR><TD class=3Dexample>final int  COLOR_RED   =3D 1;
final int  COLOR_GREEN =3D 2;
final int  COLOR_BLUE  =3D 3;
</TD></TR>
  <TR>
    <TD class=3Drationale>This indicates that the constants belong =
together, and=20
      what concept the constants represents.=20
      <P>An alternative to this approach is to put the constants inside =
an=20
      interface effectively prefixing their names with the name of the=20
      interface: <PRE>  interface Color
  {
    final int RED   =3D 1;
    final int GREEN =3D 2;
    final int BLUE  =3D 3;
  }
</PRE></TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>27. Exception classes should be suffixed with=20
      <EM>Exception</EM>. </TD></TR>
  <TR><TD class=3Dexample>class AccessException extends Exception
{
  :
}
</TD></TR>
  <TR>
    <TD class=3Drationale>Exception classes are really not part of the =
main=20
      design of the program, and naming them like this makes them stand =
out=20
      relative to the other classes. This standard is followed by Sun in =
the=20
      basic Java library. </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>28. Default interface implementations can be =
prefixed by=20
      <EM>Default</EM>. </TD></TR>
  <TR><TD class=3Dexample>class DefaultTableCellRenderer
  implements TableCellRenderer
{
  :
}
</TD></TR>
  <TR>
    <TD class=3Drationale>It is not uncommon to create a simplistic =
class=20
      implementation of an interface providing default behaviour to the=20
      interface methods. The convention of prefixing these classes by=20
      <EM>Default</EM> has been adopted by Sun for the Java library.=20
  </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>29. Singleton classes should return their sole =
instance=20
      through method <I>getInstance</I>. </TD></TR>
  <TR><TD class=3Dexample>class UnitManager
{
  private final static UnitManager instance_ =3D new UnitManager();

  private UnitManager()
  {
    ...
  }

  public static UnitManager getInstance()  <I class=3Dnot>// NOT: get() =
or instance() or unitManager() etc.</I>
  {
    return instance_;
  }
}
</TD></TR>
  <TR>
    <TD class=3Drationale>Common practice in the Java community though =
not=20
      consistently followed by Sun in the JDK. The above layout is the =
preferred=20
      pattern. </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>30. Classes that creates instances on behalf of =
others=20
      (<I>factories</I>) can do so through method <I>new[ClassName]</I> =
</TD></TR>
  <TR><TD class=3Dexample>class PointFactory
{
  public Point newPoint(...)
  {
    ...
  }
}
</TD></TR>
  <TR>
    <TD class=3Drationale>Indicates that the instance is created by =
<I>new</I>=20
      inside the factory method and that the construct is a controlled=20
      replacement of <TT>new Point()</TT>. </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>31. Functions (methods returning an object) should =
be=20
      named after what they return and procedures (<EM>void</EM> =
methods) after=20
      what they do. </TD></TR>
  <TR><TD class=3Dexample></TD></TR>
  <TR>
    <TD class=3Drationale>Increase readability. Makes it clear what the =
unit=20
      should do and especially all the things it is <EM>not</EM> =
supposed to do.=20
      This again makes it easier to keep the code clean of side effects. =

  </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
******=0A=
=0A=
   FILES=0A=
=0A=
*************************************************************************=
******=0A=
-->
<P>
<H1><A name=3DFiles></A>4 Files </H1><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>32. Java source files should have the extension=20
      <EM>.java</EM>. </TD></TR>
  <TR><TD class=3Dexample>Point.java
</TD></TR>
  <TR>
    <TD class=3Drationale>Enforced by the Java tools. =
</TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>33. Classes should be declared in individual files =
with=20
      the file name matching the class name. Secondary private classes =
can be=20
      declared as inner classes and reside in the file of the class they =
belong=20
      to. </TD></TR>
  <TR><TD class=3Dexample></TD></TR>
  <TR>
    <TD class=3Drationale>Enforced by the Java tools. =
</TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>34. File content must be kept within 80 columns. =
</TD></TR>
  <TR><TD class=3Dexample></TD></TR>
  <TR>
    <TD class=3Drationale>80 columns is the common dimension for =
editors,=20
      terminal emulators, printers and debuggers, and files that are =
shared=20
      between several developers should keep within these constraints. =
It=20
      improves readability when unintentional line breaks are avoided =
when=20
      passing a file between programmers. </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>35. Special characters like TAB and page break =
must be=20
      avoided. </TD></TR>
  <TR><TD class=3Dexample></TD></TR>
  <TR>
    <TD class=3Drationale>These characters are bound to cause problem =
for=20
      editors, printers, terminal emulators or debuggers when used in a=20
      multi-programmer, multi-platform environment. =
</TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>36. The incompleteness of split lines must be made =
obvious=20
      <A =
href=3D"#ref1">[1]</A>.=20
</TD></TR>
  <TR><TD class=3Dexample>totalSum =3D a + b + c +
           d + e;

method(param1, param2,
       param3);

setText ("Long line split" +
         "into two parts.");

for (int tableNo =3D 0; tableNo &lt; nTables;
     tableNo +=3D tableStep) {
  ...
}
</TD></TR>
  <TR>
    <TD class=3Drationale>Split lines occurs when a statement exceed the =
80=20
      column limit given above. It is difficult to give rigid rules for =
how=20
      lines should be split, but the examples above should give a =
general hint.=20
      <P>In general:=20
      <UL>
        <LI>Break after a comma. </LI>
        <LI>Break after an operator.</LI>
        <LI>Align the new line with the beginning of the expression on =
the=20
        previous line.</LI></UL></TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
******=0A=
=0A=
   STATEMENTS=0A=
=0A=
*************************************************************************=
******=0A=
-->
<P>
<H1><A name=3DStatements></A>5 Statements </H1>
<H3><A name=3D"Package and Import Statements"></A>5.1 Package and Import =

Statements </H3><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>37. The <TT>package</TT> statement must be the =
first=20
      statement of the file. All files should belong to a specific =
package.=20
  </TD></TR>
  <TR><TD class=3Dexample></TD></TR>
  <TR>
    <TD class=3Drationale>The <TT>package</TT> statement location is =
enforced by=20
      the Java language. Letting all files belong to an actual (rather =
than the=20
      Java default) package enforces Java language object oriented =
programming=20
      techniques. </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>38. The <TT>import</TT> statements must follow the =

      <TT>package</TT> statement. <TT>import</TT> statements should be =
sorted=20
      with the most fundamental packages first, and grouped with =
associated=20
      packages together and one blank line between groups. </TD></TR>
  <TR><TD class=3Dexample>import java.io.IOException;
import java.net.URL;

import java.rmi.RmiServer;
import java.rmi.server.Server;

import javax.swing.JPanel;
import javax.swing.event.ActionEvent;

import org.linux.apache.server.SoapServer;
</TD></TR>
  <TR>
    <TD class=3Drationale>The <TT>import</TT> statement location is =
enforced by=20
      the Java language. The sorting makes it simple to browse the list =
when=20
      there are many imports, and it makes it easy to determine the=20
      dependiencies of the present package The grouping reduce =
complexity by=20
      collapsing related information into a common unit. =
</TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>39. Imported classes should always be listed =
explicitly.=20
  <TR><TD class=3Dexample>import java.util.List;      <I class=3Dnot>// =
NOT: import java.util.*;</I>
import java.util.ArrayList;
import java.util.HashSet;
</TD></TR>
  <TR>
    <TD class=3Drationale>Importing classes explicitly gives an =
excellent=20
      documentation value for the class at hand and makes the class =
easier to=20
      comprehend and maintain.=20
      <P>Appropriate tools should be used in order to always keep the =
import=20
      list minimal and up to date. </P></TD></TR></TBODY></TABLE>
<H3><A name=3D"Classes and Interfaces"></A>5.2 Classes and =
Interfaces</H3><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>40. Class and Interface declarations should be =
organized=20
      in the following manner:=20
      <OL>
        <LI>Class/Interface documentation. </LI>
        <LI><TT>class</TT> or <TT>interface</TT> statement. </LI>
        <LI>Class (<TT>static</TT>) variables in the order =
<TT>public</TT>,=20
        <TT>protected</TT>, package (no access modifier), =
<TT>private</TT>.</LI>
        <LI>Instance variables in the order <TT>public</TT>, =
<TT>protected</TT>,=20
        package (no access modifier), <TT>private</TT>.</LI>
        <LI>Constructors. </LI>
        <LI>Methods (no specific order). </LI></OL></TD></TR>
  <TR><TD class=3Dexample></TD></TR>
  <TR>
    <TD class=3Drationale>Reduce complexity by making the location of =
each class=20
      element predictable. </TD></TR></TBODY></TABLE>
<H3><A name=3DMethods></A>5.3 Methods </H3><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>41. Method modifiers should be given in the =
following=20
      order:<BR><EM>&lt;access&gt; static abstract synchronized =
&lt;unusual&gt;=20
      final native</EM><BR>The <EM>&lt;access&gt;</EM> modifier (if =
present)=20
      must be the first modifier. </TD></TR>
  <TR><TD class=3Dexample>public static double square(double a);  <I =
class=3Dnot>// NOT: static public double square(double a);</I>
</TD></TR>
  <TR>
    <TD class=3Drationale><EM>&lt;access&gt;</EM> is one of =
<EM>public</EM>,=20
      <EM>protected</EM> or <EM>private</EM> while =
<EM>&lt;unusual&gt;</EM>=20
      includes <EM>volatile</EM> and <EM>transient</EM>. The most =
important=20
      lesson here is to keep the <EM>access</EM> modifier as the first =
modifier.=20
      Of the possible modifiers, this is by far the most important, and =
it must=20
      stand out in the method declaration. For the other modifiers, the =
order is=20
      less important, but it make sense to have a fixed convention.=20
  </TD></TR></TBODY></TABLE>
<H3><A name=3DTypes></A>5.4 Types</H3><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>42. Type conversions must always be done =
explicitly. Never=20
      rely on implicit type conversion. </TD></TR>
  <TR><TD class=3Dexample>floatValue =3D (int) intValue; <I =
class=3Dnot>// NOT: floatValue =3D intValue;</I>
</TD></TR>
  <TR>
    <TD class=3Drationale>By this, the programmer indicates that he is =
aware of=20
      the different types involved and that the mix is intentional.=20
  </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>43. Array specifiers must be attached to the type =
not the=20
      variable. </TD></TR>
  <TR><TD class=3Dexample>int[] a =3D new int[20];   <I class=3Dnot>// =
NOT: int a[] =3D new int[20]
</I></TD></TR>
  <TR>
    <TD class=3Drationale>The <I>arrayness</I> is a feature of the base =
type,=20
      not the variable. It is not known why Sun allows both forms.=20
</TD></TR></TBODY></TABLE>
<H3><A name=3DVariables></A>5.5 Variables </H3><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>44. Variables should be initialized where they are =

      declared and they should be declared in the smallest scope =
possible.=20
</TD></TR>
  <TR><TD class=3Dexample></TD></TR>
  <TR>
    <TD class=3Drationale>This ensures that variables are valid at any =
time.=20
      Sometimes it is impossible to initialize a variable to a valid =
value where=20
      it is declared. In these cases it should be left uninitialized =
rather than=20
      initialized to some phony value. </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>45. Variables must never have dual meaning. =
</TD></TR>
  <TR><TD class=3Dexample></TD></TR>
  <TR>
    <TD class=3Drationale>Enhances readability by ensuring all concepts =
are=20
      represented uniquely. Reduce chance of error by side effects.=20
  </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>46. Class variables should never be declared =
public.=20
</TD></TR>
  <TR><TD class=3Dexample></TD></TR>
  <TR>
    <TD class=3Drationale>The concept of Java information hiding and=20
      encapsulation is violated by public variables. Use private =
variables and=20
      access functions instead. One exception to this rule is when the =
class is=20
      essentially a data structure, with no behavior (equivalent to a =
C++=20
      <TT>struct</TT>). In this case it is appropriate to make the =
class'=20
      instance variables public <A=20
      =
href=3D"#ref2">[2]</A>.=20
  </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>47. Arrays should be declared with their brackets =
next to=20
      the type. </TD></TR>
  <TR><TD class=3Dexample>double[] vertex;  <I class=3Dnot>// NOT: =
double vertex[];</I>
int[]    count;   <I class=3Dnot>// NOT: int    count[];</I>

public static void main(String[] arguments)

public double[] computeVertex()
</TD></TR>
  <TR>
    <TD class=3Drationale>The reason for is twofold. First, the=20
      <EM>array-ness</EM> is a feature of the class, not the variable. =
Second,=20
      when returning an array from a method, it is not possible to have =
the=20
      brackets with other than the type (as shown in the last example).=20
  </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>48. Variables should be kept alive for as short a =
time as=20
      possible. </TD></TR>
  <TR><TD class=3Dexample></TD></TR>
  <TR>
    <TD class=3Drationale>Keeping the operations on a variable within a =
small=20
      scope, it is easier to control the effects and side effects of the =

      variable. </TD></TR></TBODY></TABLE>
<H3><A name=3DLoops></A>5.6 Loops</H3><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>49. Only loop control statements must be included =
in the=20
      <EM>for()</EM> construction. </TD></TR>
  <TR><TD class=3Dexample>sum =3D 0;                       <I =
class=3Dnot>// NOT: for (i =3D 0, sum =3D 0; i &lt; 100; i++)</I>
for (i =3D 0; i &lt; 100; i++)   <I class=3Dnot>             sum +=3D =
value[i];</I>
  sum +=3D value[i];
</TD></TR>
  <TR>
    <TD class=3Drationale>Increase maintainability and readability. Make =
a clear=20
      distinction of what <EM>controls</EM> and what is =
<EM>contained</EM> in=20
      the loop. </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>50. Loop variables should be initialized =
immediately=20
      before the loop. </TD></TR>
  <TR><TD class=3Dexample>isDone =3D false;           <I class=3Dnot>// =
NOT: bool isDone =3D false;</I>
while (!isDone) {         <I class=3Dnot>//      :</I>
  :                       <I class=3Dnot>//      while (!isDone) {</I>
}                         <I class=3Dnot>//        :</I>
                          <I class=3Dnot>//      }</I>
</TD></TR>
  <TR><TD class=3Dexample></TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>51. The use of <EM>do-while</EM> loops can be =
avoided.=20
  </TD></TR>
  <TR><TD class=3Dexample></TD></TR>
  <TR>
    <TD class=3Drationale><EM>do-while</EM> loops are less readable than =

      ordinary <EM>while</EM> loops and <EM>for</EM> loops since the =
conditional=20
      is at the bottom of the loop. The reader must scan the entire loop =
in=20
      order to understand the scope of the loop.=20
      <P>In addition, <EM>do-while</EM> loops are not needed. Any=20
      <EM>do-while</EM> loop can easily be rewritten into a =
<EM>while</EM> loop=20
      or a <EM>for</EM> loop. Reducing the number of constructs used =
enhance=20
      readbility. </P></TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>52. The use of <EM>break</EM> and =
<EM>continue</EM> in=20
      loops should be avoided. </TD></TR>
  <TR><TD class=3Dexample></TD></TR>
  <TR>
    <TD class=3Drationale>These statements should only be used if they =
prove to=20
      give higher readability than their structured counterparts.=20
</TD></TR></TBODY></TABLE>
<H3><A name=3DConditionals></A>5.7 Conditionals </H3><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>53. Complex conditional expressions must be =
avoided.=20
      Introduce temporary boolean variables instead <A=20
      =
href=3D"#ref1">[1]</A>. =
</TD></TR>
  <TR><TD class=3Dexample>bool isFinished =3D (elementNo &lt; 0) || =
(elementNo &gt; maxElement);
bool isRepeatedEntry =3D elementNo =3D=3D lastElement;
if (isFinished || isRepeatedEntry) {
  :
}

<I class=3Dnot>// NOT:
if ((elementNo &lt; 0) || (elementNo &gt; maxElement)||
     elementNo =3D=3D lastElement) {
  :
}</I>
</TD></TR>
  <TR>
    <TD class=3Drationale>By assigning boolean variables to expressions, =
the=20
      program gets automatic documentation. The construction will be =
easier to=20
      read, debug and maintain. </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>54. The nominal case should be put in the =
<EM>if</EM>-part=20
      and the exception in the <EM>else</EM>-part of an if statement <A=20
      =
href=3D"#ref1">[1]</A>. =
</TD></TR>
  <TR><TD class=3Dexample>boolean isOk =3D readFile(fileName);
if (isOk) {
  :
}
else {
  :
}
</TD></TR>
  <TR>
    <TD class=3Drationale>Makes sure that the exceptions does not =
obscure the=20
      normal path of execution. This is important for both the =
readability and=20
      performance. </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>55. The conditional should be put on a separate =
line.=20
  </TD></TR>
  <TR><TD class=3Dexample>if (isDone)       <I class=3Dnot>// NOT: if =
(isDone) doCleanup();</I>
  doCleanup();
</TD></TR>
  <TR>
    <TD class=3Drationale>This is for debugging purposes. When writing =
on a=20
      single line, it is not apparent whether the test is really true or =
not.=20
  </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>56. Executable statements in conditionals must be =
avoided.=20
    </TD></TR>
  <TR><TD class=3Dexample>InputStream stream =3D File.open(fileName, =
"w");
if (stream !=3D null) {
  :
}

<I class=3Dnot>// NOT:
if (File.open(fileName, "w") !=3D null)) {
  :
}</I>
</TD></TR>
  <TR>
    <TD class=3Drationale>Conditionals with executable statements are =
simply=20
      very difficult to read. This is especially true for programmers =
new to=20
      Java. </TD></TR></TBODY></TABLE>
<H3><A name=3DMisc></A>5.8 Miscellaneous</H3><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>57. The use of magic numbers in the code should be =

      avoided. Numbers other than <EM>0</EM> and <EM>1</EM>can be =
considered=20
      declared as named constants instead. </TD></TR>
  <TR><TD class=3Dexample>private static final int  TEAM_SIZE =3D 11;
:
Player[] players =3D new Player[TEAM_SIZE]; <I class=3Dnot>// NOT: =
Player[] players =3D new Player[11];</I>
</TD></TR>
  <TR>
    <TD class=3Drationale>If the number does not have an obvious meaning =
by=20
      itself, the readability is enhanced by introducing a named =
constant=20
      instead. </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>58. Floating point constants should always be =
written with=20
      decimal point and at least one decimal. </TD></TR>
  <TR><TD class=3Dexample>double total =3D 0.0;    <I class=3Dnot>// =
NOT:  double total =3D 0;</I>
double speed =3D 3.0e8;  <I class=3Dnot>// NOT:  double speed =3D =
3e8;</I>

double sum;
:
sum =3D (a + b) * 10.0;
</TD></TR>
  <TR>
    <TD class=3Drationale>This emphasize the different nature of integer =
and=20
      floating point numbers. Mathematically the two model completely =
different=20
      and non-compatible concepts.=20
      <P>Also, as in the last example above, it emphasize the type of =
the=20
      assigned variable (<TT>sum</TT>) at a point in the code where this =
might=20
      not be evident. </P></TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>59. Floating point constants should always be =
written with=20
      a digit before the decimal point. </TD></TR>
  <TR><TD class=3Dexample>double total =3D 0.5;  <I class=3Dnot>// NOT:  =
double total =3D .5;</I>
</TD></TR>
  <TR>
    <TD class=3Drationale>The number and expression system in Java is =
borrowed=20
      from mathematics and one should adhere to mathematical conventions =
for=20
      syntax wherever possible. Also, 0.5 is a lot more readable than =
.5; There=20
      is no way it can be mixed with the integer 5. =
</TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>60. Static variables or methods must always be =
refered to=20
      through the class name and never through an instance variable. =
</TD></TR>
  <TR><TD class=3Dexample>Thread.sleep(1000);    <I class=3Dnot>// NOT: =
thread.sleep(1000);</I>
</TD></TR>
  <TR>
    <TD class=3Drationale>This emphasize that the element references is =
static=20
      and independent of any particular instance. For the same reason =
the class=20
      name should also be included when a variable or method is accessed =
from=20
      within the same class. </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
******=0A=
=0A=
   6 LAYOUT AND COMMENTS=0A=
=0A=
*************************************************************************=
******=0A=
-->
<P>
<H1><A name=3D"Layout and Comments"></A>6 Layout and Comments </H1>
<H3><A name=3DLayout></A>6.1 Layout </H3><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>61. Basic indentation should be 2. </TD></TR>
  <TR><TD class=3Dexample>for (i =3D 0; i &lt; nElements; i++)
  a[i] =3D 0;
</TD></TR>
  <TR>
    <TD class=3Drationale>Indentation is used to emphasize the logical =
structure=20
      of the code. Indentation of 1 is to small to acheive this. =
Indentation=20
      larger than 4 makes deeply nested code difficult to read and =
increase the=20
      chance that the lines must be split. Choosing between indentation =
of 2, 3=20
      and 4; 2 and 4 are the more common, and 2 chosen to reduce the =
chance of=20
      splitting code lines. Note that the Sun recommendation on this =
point is 4.=20
    </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom colSpan=3D3>62. Block layout should be as =
illustrated in=20
      example 1 below (recommended) or example 2, and must not be as =
shown in=20
      example 3. Class, Interface and method blocks should use the block =
layout=20
      of example 2. </TD></TR>
  <TR><TD class=3Dexample width=3D"33%">while (!done) {
  doSomething();
  done =3D moreToDo();
}<BR>
</TD><TD class=3Dexample width=3D"33%">while (!done)
{
  doSomething();
  done =3D moreToDo();
}
</TD><TD class=3Dexample><I class=3Dnot>while (!done)
  {
    doSomething();
    done =3D moreToDo();
  }
</I>
</TD></TR>
  <TR>
    <TD class=3Drationale colSpan=3D3>Example 3 introduce an extra =
indentation=20
      level which doesn't emphasize the logical structure of the code as =
clearly=20
      as example 1 and 2. </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>63. The <EM>class</EM> and <EM>interface</EM> =
declarations=20
      should have the following form: </TD></TR>
  <TR><TD class=3Dexample>class Rectangle extends Shape
  implements Cloneable, Serializable
{
  ...
}
</TD></TR>
  <TR>
    <TD class=3Drationale>This follows from the general block rule =
above. Note=20
      that it is common in the Java developer community to have the =
opening=20
      bracket at the end of the line of the class keyword. This is not=20
      recommended. </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>64. Method definitions should have the following =
form:=20
  </TD></TR>
  <TR><TD class=3Dexample>public void someMethod()
  throws SomeException
{
  ...
}
</TD></TR>
  <TR>
    <TD class=3Drationale>See comment on <TT>class</TT> statements =
above.=20
  </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>65. The <EM>if-else</EM> class of statements =
should have=20
      the following form: </TD></TR>
  <TR><TD class=3Dexample>if (condition) {
  statements;
}

if (condition) {
  statements;
}
else {
   statements;
}

if (condition) {
  statements;
}
else if (condition) {
  statements;
}
else {
  statements;
}
</TD></TR>
  <TR>
    <TD class=3Drationale>This follows partly from the general block =
rule above.=20
      However, it might be discussed if an <TT>else</TT> clause should =
be on the=20
      same line as the closing bracket of the previous <TT>if</TT> or=20
      <TT>else</TT> clause: <PRE>  if (condition) {
    statements;
  } else {
    statements;
  }
</PRE>This is equivalent to the Sun recommendation. The chosen approach =
is=20
      considered better in the way that each part of the =
<TT>if-else</TT>=20
      statement is written on separate lines of the file. This should =
make it=20
      easier to manipulate the statement, for instance when moving =
<TT>else</TT>=20
      clauses around. </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>66. The <EM>for</EM> statement should have the =
following=20
      form: </TD></TR>
  <TR><TD class=3Dexample>for (initialization; condition; update) {
  statements;
}
</TD></TR>
  <TR>
    <TD class=3Drationale>This follows from the general block rule =
above.=20
  </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>67. An empty <EM>for</EM> statement should have =
the=20
      following form: </TD></TR>
  <TR><TD class=3Dexample>for (initialization; condition; update)
  ;
</TD></TR>
  <TR>
    <TD class=3Drationale>This emphasize the fact that the for statement =
is=20
      empty and it makes it obvious for the reader that this is =
intentional.=20
  </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>68. The <EM>while</EM> statement should have the =
following=20
      form: </TD></TR>
  <TR><TD class=3Dexample>while (condition) {
  statements;
}
</TD></TR>
  <TR>
    <TD class=3Drationale>This follows from the general block rule =
above.=20
  </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>69. The <EM>do-while</EM> statement should have =
the=20
      following form: </TD></TR>
  <TR><TD class=3Dexample>do {
  statements;
} while (condition);
</TD></TR>
  <TR>
    <TD class=3Drationale>This follows from the general block rule =
above.=20
  </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>70. The <EM>switch</EM> statement should have the=20
      following form: </TD></TR>
  <TR><TD class=3Dexample>switch (condition) {
  case ABC :
    statements;
    // Fallthrough

  case DEF :
    statements;
    break;

  case XYZ :
    statements;
    break;

  default :
    statements;
    break;
}
</TD></TR>
  <TR>
    <TD class=3Drationale>This differs slightly from the Sun =
recommendation both=20
      in indentation and spacing. In particular, each <TT>case</TT> =
keyword is=20
      indented relative to the switch statement as a whole. This makes =
the=20
      entire switch statement stand out. Note also the extra space =
before the=20
      <EM>:</EM> character. The explicit <EM>Fallthrough</EM> comment =
should be=20
      included whenever there is a case statement without a =
<TT>break</TT>=20
      statement. Leaving the <TT>break</TT> out is a common error, and =
it must=20
      be made clear that it is intentional when it is not there.=20
</TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>71. A <EM>try-catch</EM> statement should have the =

      following form: </TD></TR>
  <TR><TD class=3Dexample>try {
  statements;
}
catch (Exception exception) {
  statements;
}

try {
  statements;
}
catch (Exception exception) {
  statements;
}
finally {
  statements;
}
</TD></TR>
  <TR>
    <TD class=3Drationale>This follows partly from the general block =
rule above.=20
      This form differs from the Sun recommendation in the same way as =
the=20
      <TT>if-else</TT> statement described above. =
</TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>72. Single statement <TT>if-else</TT>, =
<TT>for</TT> or=20
      <TT>while</TT> statements can be written without brackets. =
</TD></TR>
  <TR><TD class=3Dexample>if (condition)
  statement;

while (condition)
  statement;

for (initialization; condition; update)
  statement;
</TD></TR>
  <TR>
    <TD class=3Drationale>It is a common recommendation (Sun Java =
recommendation=20
      included) that brackets should always be used in all these cases. =
However,=20
      brackets are in general a language construct that groups several=20
      statements. Brackets are per definition superfluous on a single =
statement.=20
      A common argument against this syntax is that the code will break=20
      <EM>if</EM> an additional statement is added without also adding =
the=20
      brackets. In general however, code should never be written to =
accommodate=20
      for changes that <EM>might</EM> arise. </TD></TR></TBODY></TABLE>
<H3><A name=3D"White Space"></A>6.2 White Space</H3><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>73.<BR>- Operators should be surrounded by a space =

      character. <BR>- Java reserved words should be followed by a white =
space.=20
      <BR>- Commas should be followed by a white space. <BR>- Colons =
should be=20
      surrounded by white space. <BR>- Semicolons in for statements =
should be=20
      followed by a space character.<BR></TD></TR>
  <TR><TD class=3Dexample>a =3D (b + c) * d; <I class=3Dnot>// NOT: =
a=3D(b+c)*d</I>

while (true) {   <I class=3Dnot>// NOT: while(true){</I>
  ...

doSomething(a, b, c, d);  <I class=3Dnot>// NOT: =
doSomething(a,b,c,d);</I>

case 100 :  <I class=3Dnot>// NOT: case 100:</I>

for (i =3D 0; i &lt; 10; i++) {  <I class=3Dnot>// NOT: =
for(i=3D0;i&lt;10;i++){<I>
  ...
</I></I></TD></TR>
  <TR>
    <TD class=3Drationale>Makes the individual components of the =
statements=20
      stand out and enhances readability. It is difficult to give a =
complete=20
      list of the suggested use of whitespace in Java code. The examples =
above=20
      however should give a general idea of the intentions. =
</TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>74. Method names can be followed by a white space =
when it=20
      is followed by another name. </TD></TR>
  <TR><TD class=3Dexample>doSomething (currentFile);
</TD></TR>
  <TR>
    <TD class=3Drationale>Makes the individual names stand out. Enhances =

      readability. When no name follows, the space can be omitted=20
      (<TT>doSomething()</TT>) since there is no doubt about the name in =
this=20
      case.=20
      <P>An alternative to this approach is to require a space =
<I>after</I> the=20
      opening parenthesis. Those that adhere to this standard usually =
also leave=20
      a space before the closing parentheses: <TT>doSomething( =
currentFile=20
      );</TT>. This do make the individual names stand out as is the =
intention,=20
      but the space before the closing parenthesis is rather artificial, =
and=20
      without this space the statement looks rather asymmetrical=20
      (<TT>doSomething( currentFile);</TT>). =
</P></TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>75. Logical units within a block should be =
separated by=20
      one blank line. </TD></TR>
  <TR><TD class=3Dexample><I class=3Dnot>// Create a new identity =
matrix</I>
Matrix4x4 matrix =3D new Matrix4x4();

<I class=3Dnot>// Precompute angles for efficiency</I>
double cosAngle =3D Math.cos(angle);
double sinAngle =3D Math.sin(angle);

<I class=3Dnot>// Specify matrix as a rotation transformation</I>
matrix.setElement(1, 1,  cosAngle);
matrix.setElement(1, 2,  sinAngle);
matrix.setElement(2, 1, -sinAngle);
matrix.setElement(2, 2,  cosAngle);

<I class=3Dnot>// Apply rotation</I>
transformation.multiply(matrix);
</TD></TR>
  <TR>
    <TD class=3Drationale>Enhances readability by introducing white =
space=20
      between logical units. Each block is often introduced by a comment =
as=20
      indicated in the example above. </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>76. Methods should be separated by three blank =
lines.=20
  </TD></TR>
  <TR><TD class=3Dexample></TD></TR>
  <TR>
    <TD class=3Drationale>By making the space larger than space within a =
method,=20
      the methods will stand out within the class. =
</TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>77. Variables in declarations can be left aligned. =
</TD></TR>
  <TR><TD class=3Dexample>TextFile  file;
int       nPoints;
double    x, y;
</TD></TR>
  <TR>
    <TD class=3Drationale>Enhances readability. The variables are easier =
to spot=20
      from the types by alignment. </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>78. Statements should be aligned wherever this =
enhances=20
      readability. </TD></TR>
  <TR><TD class=3Dexample>if      (a =3D=3D lowValue)    =
compueSomething();
else if (a =3D=3D mediumValue) computeSomethingElse();
else if (a =3D=3D highValue)   computeSomethingElseYet();

value =3D (potential        * oilDensity)   / constant1 +
        (depth            * waterDensity) / constant2 +
        (zCoordinateValue * gasDensity)   / constant3;

minPosition     =3D computeDistance(min,     x, y, z);
averagePosition =3D computeDistance(average, x, y, z);

switch (phase) {
  case PHASE_OIL   : text =3D "Oil";   break;
  case PHASE_WATER : text =3D "Water"; break;
  case PHASE_GAS   : text =3D "Gas";   break;
}
</TD></TR>
  <TR>
    <TD class=3Drationale>There are a number of places in the code where =
white=20
      space can be included to enhance readability even if this violates =
common=20
      guidelines. Many of these cases have to do with code alignment. =
General=20
      guidelines on code alignment are difficult to give, but the =
examples above=20
      should give some general hints. In short, any construction that =
enhances=20
      readability should be allowed. </TD></TR></TBODY></TABLE>
<H3><A name=3DComments></A>6.3 Comments</H3><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>79. Tricky code should not be commented but =
rewritten <A=20
      =
href=3D"#ref1">[1]</A>. =
</TD></TR>
  <TR><TD class=3Dexample></TD></TR>
  <TR>
    <TD class=3Drationale>In general, the use of comments should be =
minimized by=20
      making the code self-documenting by appropriate name choices and =
an=20
      explicit logical structure. </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>80. All comments should be written in English. =
</TD></TR>
  <TR><TD class=3Dexample></TD></TR>
  <TR>
    <TD class=3Drationale>In an international environment English is the =

      preferred language. </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>81. Javadoc comments should have the following =
form:=20
</TD></TR>
  <TR><TD class=3Dexample><I class=3Dnot>/**
 * Return lateral location of the specified position.
 * If the position is unset, NaN is returned.
 *
 * @param x    X coordinate of position.
 * @param y    Y coordinate of position.
 * @param zone Zone of position.
 * @return     Lateral location.
 * @throws IllegalArgumentException  If zone is &lt;=3D 0.
 */</I>
public double computeLocation(double x, double y, int zone)
  throws IllegalArgumentException
{
  ...
}
</TD></TR>
  <TR>
    <TD class=3Drationale>A readable form is important because this type =
of=20
      documentation is typically read more often <I>inside</I> the code =
than it=20
      is as processed text.=20
      <P>Note in particular:=20
      <UL>
        <LI>The opening /** on a separate line</LI>
        <LI>Subsequent * is aligned with the first one</LI>
        <LI>Space after each *</LI>
        <LI>Empty line between description and parameter section.</LI>
        <LI>Alignment of parameter descriptions.</LI>
        <LI>Punctuation behind each parameter description.</LI>
        <LI>No blank line bewteen the documentation block and the =
method/class.=20
        </LI></UL>
      <P>Javadoc of class members can be specified on a single line as =
follows: <PRE>  /** Number of connections to this database */
  private int nConnections_;
</PRE></TT></TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>82. There should be a space after the comment =
identifier.=20
    </TD></TR>
  <TR><TD class=3Dexample>// This is a comment    <I class=3Dnot>NOT: =
//This is a comment</I>

/**                     <I class=3Dnot>NOT: /**</I>
 * This is a javadoc    <I class=3Dnot>      *This is a javadoc</I>
 * comment              <I class=3Dnot>      *comment</I>
 */                     <I class=3Dnot>      */</I>
</TD></TR>
  <TR>
    <TD class=3Drationale>Improves readability by making the text stand =
out.=20
  </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>83. Use <EM>//</EM> for all non-JavaDoc comments,=20
      including multi-line comments. </TD></TR>
  <TR><TD class=3Dexample>// Comment spanning
// more than one line.
</TD></TR>
  <TR>
    <TD class=3Drationale>Since multilevel Java commenting is not =
supported,=20
      using // comments ensure that it is always possible to comment out =
entire=20
      sections of a file using /* */ for debugging purposes etc.=20
</TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>84. Comments should be indented relative to their =
position=20
      in the code <A=20
      =
href=3D"#ref1">[1]</A>. =
</TD></TR>
  <TR><TD class=3Dexample>while (true) {       <I class=3Dnot>// NOT:  =
while (true) { </I>
  // Do something    <I class=3Dnot>         // Do something</I>
  something();       <I class=3Dnot>           something();</I>
}                    <I class=3Dnot>         }</I>
</TD></TR>
  <TR>
    <TD class=3Drationale>This is to avoid that the comments break the =
logical=20
      structure of the program. </TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>85. The declaration of anonymous collection =
variables=20
      should be followed by a comment stating the common type of the =
elements of=20
      the collection. </TD></TR>
  <TR><TD class=3Dexample>private Vector  points_;    <I class=3Dnot>// =
of Point</I>
private Set     shapes_;    <I class=3Dnot>// of Shape</I>
</TD></TR>
  <TR>
    <TD class=3Drationale>Without the extra comment it can be hard to =
figure out=20
      what the collection consist of, and thereby how to treat the =
elements of=20
      the collection. In methods taking collection variables as input, =
the=20
      common type of the elements should be given in the associated =
JavaDoc=20
      comment.=20
      <P>Whenever possible one should of course qualify the collection =
with the=20
      type to make the comment superflous: <PRE>  private =
Vector&lt;Point&gt;  points_;
  private Set&lt;Shape&gt;     shapes_;
</PRE></TD></TR></TD></TR></TBODY></TABLE><!--=0A=
*************************************************************************=
***=0A=
   Rule=0A=
*************************************************************************=
***=0A=
-->
<P></P>
<TABLE class=3Drule width=3D"100%">
  <TBODY>
  <TR>
    <TD class=3Drecom>86. All public classes and public and protected =
functions=20
      within public classes should be documented using the Java =
documentation=20
      (javadoc) conventions. </TD></TR>
  <TR><TD class=3Dexample></TD></TR>
  <TR>
    <TD class=3Drationale>This makes it easy to keep up-to-date online =
code=20
      documentation. </TD></TR></TBODY></TABLE>
<P>
<H1><A name=3DReferences></A>7 References </H1>
<P><A name=3Dref1></A>[1] Code Complete, Steve McConnel - Microsoft =
Press=20
<P><A name=3Dref2></A>[2] Java Code Conventions<BR><A=20
href=3D"http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html">http=
://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html</A>=20

<P><A name=3Dref3></A>[3] Netscape's Software Coding Standards for Java =
<BR><A=20
href=3D"http://developer.netscape.com/docs/technote/java/codestyle.html">=
http://developer.netscape.com/docs/technote/java/codestyle.html</A>
<P><A name=3Dref4></A>[4] C / C++ / Java Coding Standards from NASA =
<BR><A=20
href=3D"http://v2ma09.gsfc.nasa.gov/coding_standards.html">http://v2ma09.=
gsfc.nasa.gov/coding_standards.html</A>
<P><A name=3Dref5></A>[5] Coding Standards for Java from AmbySoft <BR><A =

href=3D"http://www.ambysoft.com/javaCodingStandards.html">http://www.amby=
soft.com/javaCodingStandards.html</A>=20
</P></BODY></HTML>

------=_NextPart_000_0000_01CC25F9.2F9C0420
Content-Type: text/css;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://geosoft.no/style.css

BODY {
	FONT-FAMILY: "trebuchet MS"; FONT-SIZE: 10pt
}
A {
	FONT-FAMILY: "trebuchet MS"; FONT-SIZE: 10pt
}
TD {
	FONT-FAMILY: "trebuchet MS"; FONT-SIZE: 10pt
}
OL {
	FONT-FAMILY: "trebuchet MS"; FONT-SIZE: 10pt
}
P {
	FONT-FAMILY: "trebuchet MS"; FONT-SIZE: 10pt
}
CENTER {
	FONT-FAMILY: "trebuchet MS"; FONT-SIZE: 10pt
}
PRE {
	MARGIN: 0px
}
H1 {
	FONT-FAMILY: "trebuchet MS"; FONT-SIZE: 12pt; FONT-WEIGHT: bold; =
PADDING-TOP: 15px
}
H2 {
	FONT-FAMILY: "trebuchet MS"; FONT-SIZE: 10pt; FONT-WEIGHT: bold
}
H3 {
	FONT-FAMILY: "trebuchet MS"; FONT-SIZE: 10pt; FONT-WEIGHT: bold
}
H4 {
	FONT-FAMILY: "trebuchet MS"; FONT-SIZE: 10pt; FONT-WEIGHT: bold
}
TT {
	FONT-FAMILY: monospace
}
CODE {
	FONT-FAMILY: monospace
}
PRE {
	FONT-FAMILY: monospace
}
CODE {
	COLOR: #000099; FONT-SIZE: 1em
}
.quote {
	FONT-FAMILY: "trebuchet MS"
}
.heading {
	FONT-FAMILY: "trebuchet MS"; FONT-WEIGHT: bold
}
.title {
	FONT-FAMILY: "trebuchet MS"; FONT-WEIGHT: bold
}
.code {
	COLOR: #000099
}
.comment {
	COLOR: #990000
}
.normal {
	COLOR: #000099
}
.access {
	BACKGROUND: #990000; FONT-SIZE: 8pt
}
.noaccess {
	BACKGROUND: #990000; FONT-SIZE: 8pt
}
.legend {
	BACKGROUND: #990000; FONT-SIZE: 8pt
}
.noaccess {
	BACKGROUND: #ccbbbb
}
.legend {
	BACKGROUND: #ccaaaa
}
.trendentry {
	FONT-SIZE: 1em
}
.navigator {
	FONT-FAMILY: Helvetica, sans-serif; BACKGROUND: #ccbbbb; FONT-WEIGHT: =
bold
}
.rule {
	BORDER-RIGHT-WIDTH: 0px; BORDER-COLLAPSE: collapse; FONT-FAMILY: =
"trebuchet MS"; BORDER-TOP-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; =
BORDER-LEFT-WIDTH: 0px
}
.android-table {
	PADDING-BOTTOM: 0px; PADDING-LEFT: 25px; PADDING-RIGHT: 25px; =
PADDING-TOP: 0px
}
.android-command {
	BORDER-BOTTOM: #cccccc 1px solid; BORDER-LEFT: #cccccc 1px solid; =
PADDING-BOTTOM: 15px; PADDING-LEFT: 15px; PADDING-RIGHT: 15px; =
FONT-FAMILY: Fixed, monospace; BACKGROUND: #ffffdd; BORDER-TOP: #cccccc =
1px solid; BORDER-RIGHT: #cccccc 1px solid; PADDING-TOP: 15px
}
.recom {
	BORDER-BOTTOM: #667799 1px solid; BORDER-LEFT: #667799 1px solid; =
PADDING-BOTTOM: 5px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; BACKGROUND: =
#bbccee; BORDER-TOP: #667799 1px solid; FONT-WEIGHT: bold; BORDER-RIGHT: =
#667799 1px solid; PADDING-TOP: 5px
}
.example {
	BORDER-BOTTOM: #667799 1px solid; BORDER-LEFT: #667799 1px solid; =
PADDING-BOTTOM: 5px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; FONT-FAMILY: =
monospace; WHITE-SPACE: pre; COLOR: #000077; FONT-SIZE: 1em; BORDER-TOP: =
#667799 1px solid; BORDER-RIGHT: #667799 1px solid; PADDING-TOP: 5px
}
not {
	BORDER-BOTTOM: #667799 1px solid; BORDER-LEFT: #667799 1px solid; =
PADDING-BOTTOM: 5px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; FONT-FAMILY: =
monospace; WHITE-SPACE: pre; COLOR: #000077; FONT-SIZE: 1em; BORDER-TOP: =
#667799 1px solid; BORDER-RIGHT: #667799 1px solid; PADDING-TOP: 5px
}
.not {
	COLOR: #770000
}
.color1 {
	COLOR: #007700
}
.color2 {
	COLOR: #0000bb
}
.color3 {
	COLOR: #770000
}
.android-hr {
	BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; BACKGROUND-COLOR: #a6c939; =
HEIGHT: 20px; BORDER-TOP: 0px; BORDER-RIGHT: 0px
}
.practice {
	BACKGROUND: #bbccee; FONT-WEIGHT: bold
}
.rationale {
	BORDER-BOTTOM: #667799 1px solid; BORDER-LEFT: #667799 1px solid; =
PADDING-BOTTOM: 5px; FONT-STYLE: normal; PADDING-LEFT: 5px; =
PADDING-RIGHT: 5px; FONT-SIZE: 10pt; BORDER-TOP: #667799 1px solid; =
BORDER-RIGHT: #667799 1px solid; PADDING-TOP: 5px
}
.warning {
	BACKGROUND: yellow; COLOR: red
}

------=_NextPart_000_0000_01CC25F9.2F9C0420--
